---
- name: create hive data directory
  file: dest={{ hive_data_dir }}/logs mode=0775 state=directory
- name: install hive
  unarchive: src={{ hive_package_name }} dest=/opt/bigdata/
- name: if hive_home exists then remove
  file: path={{ hive_home }} state=absent
- name: rename hive home
  shell: mv /opt/bigdata/{{ hive_unpackage_name }} {{ hive_home }}
- name: install configuration file for hive-env
  template: src=hive-env.sh.j2 dest={{ hive_home }}/conf/hive-env.sh
- name: install configuration file for hive metastore
  template: src=metastore-hive-site.xml.j2 dest={{ hive_home }}/conf/hive-site.xml
  when: metastore_service == "true"
- name: install configuration file for hive
  template: src=hive-site.xml.j2 dest={{ hive_home }}/conf/hive-site.xml
  when: metastore_service == "false"
- name: copy mysql_connector to {{ hive_home }}/lib.
  copy: src={{ mysql_connector_name }} dest={{ hive_home }}/lib/{{ mysql_connector_name }} mode=644
  when: metastore_service == "true"
- name: set env
  lineinfile: dest={{ env_file }} insertafter="{{ item.position }}" line="{{ item.value }}" state=present
  with_items:
    - {position: EOF, value: "# hive environment"}
    - {position: EOF, value: "export HIVE_HOME={{ hive_home }}"}
    - {position: EOF, value: "export PATH=$PATH:$HIVE_HOME/bin"}
- name: enforce env
  shell: source {{ env_file }}
- name: init mysql schema
  shell: source {{ env_file }} && {{ hive_home }}/bin/schematool -dbType mysql -initSchema
  when: first_install == "true" and metastore_service == "true"
- name: start metastore service
  shell: source {{ env_file }} && nohup {{ hive_home }}/bin/hive --service metastore >> {{ hive_data_dir }}/logs/hive.log 2>&1 &
  when: metastore_service == "true"
  tags:
    - start
- name: start hiveserver2 service
  shell: source {{ env_file }} &&  nohup {{ hive_home }}/bin/hiveserver2 >> {{ hive_data_dir }}/logs/hive.log 2>&1 &
  when: hiveserver2_service == "true"
  tags:
    - start